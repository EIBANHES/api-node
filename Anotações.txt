Aqui contém o passo a passo do que precisa para criar uma api em Node.js

- Inserir o comando:
  - npm init -y

- Instalando o express, como dependencia de projeto, para lidar com requisições na web:
  - npm i express --save

- Criar pasta src na raiz do projeto:
  - Criar arquivo server.js
    - Importar o express
    - Inicializar o express
    - Setar porta do express

- Executar node.js:
  - Criar script de inicialização
    - "start": "node ./src/server.js"
    - npm start

- Métodos de requisições:
  - GET: leitura
  - POST: criação
  - PUT: Atualização
  - DELETE: Deleção
  - PATH: Atualização específica

- Implementação do método get:
  - app.get("aqui-vai-a-rota", (request, response) => { } );

- Router params:
  -> Consegue passar um parâmetro para a rota.
    - https://enderecodoservidor.com.br/users/5 -> o número 5 é um parâmetro
  -> Colocando o parâmetro na rota
    - app.get("/message/:id", (request, response) => { } )
    - app.get("/message/:id/:user", (request, response) => {
                // devolve resposta
                response.send(`
                Id da mensagem: ${request.params.id}
                Para o usuário${request.params.user}`
                )
              });

- Query Params:
  - Os valores não sao obrigatorios, diferente do Router params.
  - http://localhost:3333/users?page=2&limit=5

- Nodemon, visualizador do servidor:
  - npm install nodemon --save-dev | dependencia de desenvolvimento
  - "dev": "nodemon ./src/server.js" | npm run dev

- Organização do projeto:
  - src:pasta
    - server.js -> inicializar a app
    - routes:pasta -> rotas do projeto
    - controllers:pasta -> Parte responsavel pela regra de negocio.
    - utlis:pasta -> tratamento de exceção.

- Http codes
  - Códigos de respostas
    - 1xx -> Informativo.
    - 2xx -> Sucesso.
    - 3xx -> Redirecionamento.
    - 4xx -> Erro do cliente.
    - 5xx -> Erro no servidor.

- Middleware:
  - O que são Middlewares?
    - Função que consegue interceptar uma requisição, consegue acessar o conteudo, 
      objeto de resposta e sabe o destino

- Biblioteca para lidar com erros:
  - npm install express-async-errors --save
  - Lida com erros.
